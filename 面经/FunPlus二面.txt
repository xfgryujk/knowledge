之前的项目介绍
协议频率限制是指客户端向服务器的某一些协议做限制吗
这个是在服务器做限制吗
具体怎么限制呢
    每一个玩家，以及每一条协议都有限制的
    解释了一下令牌桶
听上去比较抽象，那在代码中是怎么实现的呢
    原理是那样，实际上我们不是通过一个定时器去添加令牌，而是请求来的时候再去计算这个时候有多少令牌
    会记一个之前存储的令牌数量，还有上次更新的时间，然后拿时间间隔乘以这段时间添加令牌的速度，就可以得到添加的令牌数。再加上上次已经有的令牌，就是当前拥有的令牌。当然这个令牌会有一个最大值的限制
    计算出当前的令牌数之后就可以判断这个请求能不能拿到令牌了
如果拿不到令牌协议就不处理，那协议不会丢失吗
    是会丢失，我们会回复一个拒绝的消息
那实际上你那边会处理吗
    客户端会处理
你觉得这个工作主要的难点、挑战在哪里
    其实也不是很难

你提到有一个配置发布的工具，大概是什么样的配置
    我们有一些在数据库中的配置，有一些是在数值文件里面的
是什么性质的，是业务的配表的数据吗
    数值文件里的就是策划配的那些表嘛，数据库里面的主要就是一些技术上的吧，比如这个区服里面最大注册玩家是多少人，停服时间是什么时候到什么时候，如果停服了回给客户端回什么消息这样
那这个数据它分发流程是什么样的
    这个流程还挺长的，首先运营在我的工具上点一个按钮，发布一个我要发布数值的任务，然后我的worker接收到这个任务
    首先从公司内网的一个数值存储服务器上面读取数值，然后上传到一个云服务的存储里面，比如OSS吧
    上传完之后我给运维平台那边发布一个消息，让它们把数值发布到线上的服务器上面
    运维那边具体执行的是，运维会在每个服务器上面配置一个agent，agent可以执行一些命令，agent通过OSS的下载工具，把数值下载到服务器本地，然后解压然后替换掉，大概这么个过程
解压然后替换，这样就完成了这个发布是吗
    替换完成后我们会向服务器发一个信号，在信号处理函数里面会标记一下需要更新数值，然后主循环在下一次就去加载数值
有没有客户端需要用到的数值文件
    那个也是有的，刚才流程前半部分是和客户端一起发的，就是上传到OSS
    我们会把客户端数值也一起上传到OSS，然后更新完服务器数值之后我们会向数据库中写一下当前客户端数值的版本，下一次服务器加载完配置后会读到这个新的客户端版本，就把这个新的版本通知到客户端
    然后客户端会从OSS下载新的数值
话说OSS适合做这样的发布吗，客户端的数量是比较多的嘛。就是一次广播通知之后，你的在线玩家假如有100w，他们会全部同时去OSS拉这个配置吗
    在线玩家都会
    当然我们不是直接从OSS拉的，我们会有CDN的
那发到CDN的数据格式是什么样的呢，是文本文件吗，JSON文件吗
    它源文件是一个文本文件的格式，但是我们在构建的时候会把它转一下格式，就转成程序更好读的格式
    就是客户端那边自己造的一个格式，二进制的
那一次客户端配表数据的发布，大概有多大
    几百MB吧
    看情况吧，有一些是只发布了差异文件，有一些是全量发布的
那什么时候发全量什么时候发差异呢
    主要是版本更新肯定发全量，平时一些小的更新就发差异了吧
你们的客户端patch是不包含这些数据是吧，或者说如果我打一个完整包，这个包里会有配表数据吗
    （不太理解）没有的，这些算是外部的资源吧，不会打到包里面

你有偏业务一点的工作吗
那排行榜是怎么做的
    我们是基于Redis去实现的，用了Redis的Zset，就是一个有序的列表（集合）嘛
排行榜是什么形式啊，前多少名，实时还是非实时
    都是实时的，然后前多少名还有全部的排行榜两种都有
那你的全排也是用Redis吗
    是用Redis的，如果是只有前面一两百我们就自己内部用map去做的
全排用Redis，这个数据结构要怎么设计啊，因为数据量会比较多吧
    就是用Redis那个Zset，score就是存玩家的分数嘛，存的值就是玩家的UID
那玩家的数量有多少呢，这个Zset有多大
    这个是看玩法的，我看过最大的一个是有5-6w这样
一个全排行榜只有5-6w吗，你是说只有5-6w个数据吗
    有一些核心玩法，PvP比较重的那种，参加的人会有一定限制吧
    他们是根据等级分成不同的一些段，每个段内自己排
那比如说top 100为什么要用map
    就做起来比较简单吧，map是有序的嘛
map是用什么排序的啊
    map里面就是红黑树嘛，我们用score作为key，用UID作为value
那如果score相同呢
    重复的情况下就是看时间戳和UID了，3个维度嘛，分数、时间戳、UID
就是排名不允许有重合是吗，那你单独用score作为key可以保证按时间戳和UID排序吗
    我刚才说得不是很严谨，我们其实是用一个tuple作为key嘛，里面存了分数、时间戳、UID
那分数在游戏内是什么样的数据啊，它的逻辑是怎么样的
    客户端上报过来的，它主要就是策划在Lua脚本里面计算然后上传，每个关卡计算方式会不一样
那你能将一个具体的这个分数怎么算出来的吗
    比如每个怪物有一个分数吧，然后你打了多少怪就得到多少分数这样
那这个分数是累加起来的吗，那这个分数岂不是会一直膨胀，越来越大
    它是每个关卡一个分数嘛，关卡里打的怪加起来就是它的总分数，但是多次打一个关卡会取一个最大值
那比如在你这些top N的排行榜里面有没有一些分数是会下降的呢
如果说有一个新的玩法，比如PvP的那种分数，他输了之后会扣掉，分数会下降，要做top 100的排行榜
    首先看原来有没有这个玩家吧，如果有就删除掉原来的结点，然后重新添加进去
    没有的话就看他的分数能不能上榜，是否比最小那个分数还要大，如果比它还大就加入到榜里面，然后把最小的给删掉
还是基于现在这个map的方案来做是吗
    嗯，如果只有一两百的话，遍历一遍那还好
就是说无论map还是Redis都可以是吗
那会有一些不严格的情况吗，假如说这个分数是有可能会下降
    哦，你说如果原来在这个榜上的，那分数下降之后就可能不在这个榜上了
    这种的话，其实要显示100个它不一定是存100个，我可以存1000个，如果我从榜上面下来了那还有后面的可以上升到榜上面

C++的话你的业务逻辑是单线程还是多线程
    每个玩家是单线程，但是整个进程里面是有多个线程
如果有一个操作需要同时访问两个玩家数据呢，会有这样的需求吗
    这种我们是放在一个单独的服务器上去做，相当于用另一个节点来做仲裁吧
做完之后呢，你的结果要返回吗
假如说是一个交易的操作，一个玩家给另一个玩家钱，A玩家要扣100，B玩家要加100，放在另一个节点，返回回来后要对两个玩家的数据做修改对吧，怎么修改呢
    其实就是要保证一个事务性是吗
    如果有这种需求的话，我会把这种事务先存到一个数据库里面，然后上线的时候去拉一下看看有没有未完成的事务，然后就去做
    去重的话我们会在玩家身上存储一个已经执行过的事务的列表，如果判断执行过了就不会重复去做了
就是处理事务的这个结点会存数据到数据库里面，然后A和B都会读这个数据库是吗
那你觉得有更合理的做法吗
    没想到，就这种跨节点的我觉得必须要有一种补偿的措施吧，要不然中间消息丢了怎么办

在你们的业务里面有没有需要拷贝一些玩家的数据，要把数据发到远端节点的话
    就序列化吧，就是只把需要的一些数据给序列化
那你们代码里会用到memcpy这个函数吗
    没用到，我们主要是C++的，不做那么底层
会有一些POD的设计吗，POD是什么知道吧
    没有。Plain Old Data嘛
POD有什么好处
    （还好没问定义是什么，这个真不记得）
    拷贝起来简单，像你刚才说的用memcpy就可以拷贝
memcpy这个操作是原子的吗
    （还有这种问题？）不是啊，因为它涉及到很多个地址吧
    （想想又补充了一下）可能8字节以内可以做到原子吧（准确来说是1、2、4、8字节，且地址对齐）
为什么8字节能原子
    因为寄存器就8字节，64位机器的话

你们所有的业务都是单线程的是吗
    对于单个玩家来说是单线程的
单个玩家有可能他的业务要访问数据库，或者访问外部的HTTP的业务，他的回调函数是怎么处理的
    如果是需要访问数据库，我们是做到一个单独的服务器上面（被打断）
访问的结果要返回回来的嘛，返回之后它不会有线程的问题吗
    没有吧，因为单个玩家他处理消息就是一条一条去处理
那HTTP呢
    这种我们一般是做在进程内部的，它有一些异步的worker线程吧
    就是投一条消息到worker线程去，worker线程访问完了，再把响应的消息再投回原来的线程
怎样投回原来的线程
    就是用一个消息队列嘛，我们请求的时候会带上是哪一个UID（被打断）
这个消息队列是一个内存中的数据结构吗，具体是个什么数据类型呢
    就std::queue
那这个结构是线程安全的吗
    不是，我们是加了读写锁的（其实是加了互斥锁，消息队列不是读多写少的情况）
那是每个玩家一把锁吗
    就每个消息队列一把锁，我们消息队列是跟线程绑定的
一个线程内会有多个玩家吗

C++的话如果想实现一个先进先出的队列，用什么样的逻辑
    你是说用STL那种结构吗，就queue
为什么不用vector呢
    vector如果要在头部删除一个元素，得把后面的元素全部移动（没有追问，就不说环形队列了）
用queue的话，假如说有一个需求要对queue里面的元素去重，要怎么做
    那就再加一个unordered_set，入队的时候把queue和unordered_set都添加一遍，出队的时候把unordered_set相应的元素给删除掉

你们用的数据库是什么
    我们用的MySQL

业务里面有遇到那种分布式的ID分配吗
那你有了解过如果想做分布式ID，有什么常用的方案吗
    一种是UUID，另一种是雪花算法，还有就可以一次从数据库里面一次分配一个段吧，节点拿到这个段就可以直接在节点内分配，如果没有段再去数据库去拿

一个二维平面上有两个线段，为了简化假设没有任意3个点在同一条直线上，如何判断这两个线段是否交叉
    （巧了，我高中时想做STG思考过这个问题）
    可以用解方程的方法，就是列出这两条线段的方程解出来，然后判断它们的交点是不是在线段上，如果说没有交点或者交点不在线段上就是没有相交
你说得比较简单啊，这里其实还有一些步骤。因为我给出的线段只有两个点，应该先算出它的直线方程是吧，直线方程它有个公式，然后把两个直线方程联合求交点
那交点已经求出来了怎么判断交点在不在线段内
    它有一个参数方程嘛，就是t在0到1这样，如果解出来t不在0到1那就不在线段上
    （其实等效于判断交点的X坐标在不在端点的X坐标内，或者用Y坐标也行）
只有这个点同时在两个线段内才算相交对吗
    单独一个就可以了（急了，应该要在两个线段内才算）
那时间复杂度是多少
    O(1)

定时器有什么实现方法
    定时器一般是最小堆还有时间轮嘛
这两种算法有什么区别或者特点，适用于什么样的场景
    最小堆是用堆来实现的，它的时间复杂度是O(logN)，增删的话，取最小的结点是O(1)
    时间轮是类似于哈希的思想，它增删是O(1)，差的话是查当前的列表，也是O(1)
    时间轮会有一个空推进的问题，假如一次时间跨过了很多个格子，那要把这些格子都推进一遍，如果时间轮的精度很大就会有大量的空格子，会有一个空推进的问题
    时间轮还有一个缺点就是它不好知道最新的那个定时器是什么时候过期的，最小堆的话就可以直接知道
时间轮的空推进问题有什么方法可以优化吗
    一般会把这个格子精度设置得小一点，还有就是用多级时间轮
多级时间轮可以解决空推进问题吗
    比如说把低级的格子数设置得少一点，其实还是一个精度上的优化
你们项目中实际用的哪一种呢
    我们用的时间轮
你们精度设置的是多少
    是一秒
你们有评估过或者实际去看过时间轮的格子里有放多少定时器吗
    没有
    我们业务上的需求主要还是秒级的，我们服务器不涉及到战斗，主要还是秒级的定时
那你们会有服务端的需要用tick去驱动的逻辑吗
    有，像是某个时间给他接一个任务啊，或者某个时间任务到期啊
任务到期这个时间难道不是一个确定的时间吗，看上去似乎没有必要用定时器
    （其实还是用了，在定时器里刷新任务，把过期的删掉）
    是的，那比如还有心跳超时吧，就多久时间没有心跳就把玩家踢下线

你们有用到Redis，那访问Redis或者MySQL，有一些业务会做cache保护吗
我举一个具体的业务场景，Redis里面存了一些玩家数据，这个数据用来获取一些玩家的信息，我可以看其他玩家的类似名片的信息，你们有类似的业务吗
比如说这样的数据如果我不做缓存，直接读数据库，有可能QPS会比较高吧
    这个我们是用Redis的，内存没有做cache
你们有看过Redis的这块业务的QPS是多少吗
    我没注意到
你们Redis是用的什么样的部署方式啊
    集群版的嘛
比如说有3个节点，这样一个集群模式下，Redis的QPS能达到多少数量级
    它单节点是10w，3节点就30w吧
比如说在cluster的模式下，假如有一个业务需要同时涉及到两个key的读写，这种情况要怎么做呢
    这个是用那个哈希tag，就是强制把它们分到同一个节点上
那它们有一些大key嘛，比如说排行榜有一个key会达到5-6w个的数据量，这种有什么问题呢
    网络带宽上有问题吧，一次传输的东西太多的话可能会阻塞业务线程这样
实际上有碰到吗
    我们不会去读这么大一个数据，一般都是读其中几个成员

有接触过一些docker相关的技术吗
    我个人是有用，项目里面没有用到

个人的话对自己的发展，有什么样的预期，希望从事哪方面的技术工作
为什么想做游戏业务呢，不想做工具呢
为什么会觉得做工具对项目没有贡献呢

Golang是自己自学的是吧

一些后端常用的业务的架构，比如场景管理，这些有了解过吗
    场景的话主要就是九宫格、灯塔、十字链表这些，项目当中没有用
SLG这边服务器有哪些架构方面的问题，有一些了解吗
    SLG没有了解过
你现在面试的职位其实是一个SLG的项目，这个你知道吗
    啊不知道
你个人是并没有一个明确的目标是吗
    我对游戏类型没什么要求
对开发语言也没有要求是吗
    没有

反问
    你们会用到什么技术栈或者框架之类的吗
        这个你跟一面的面试官有聊过吗
        公司这边大的技术栈有两个方向，一个是Lua，一个是Golang。然后基本算是分布式的架构，各个项目之间会有一些差别，不完全一样
    像是skynet那种Actor模式吗
        这个其实只是一种业务的包装，不同项目可能用法不一样
    你们工作氛围是怎么样的，就办公室气氛啊，上班时间，有没有团建之类的吧
        团建这边我们每个项目都有一个专门的HRBP，会定期组织团建
        工作氛围的话，这边目前这个阶段工作压力会大一些，详细的你可以问HR，这个主要是看项目的阶段，主要因为我们这边5、6月份的话会有一个版本，后面的话要看后面具体的项目规划


------
简历上写的，之前做的项目，各种细节一定要清楚
另外游戏服务器常用的技术、算法要多了解，这家问这些应该是很看重自主学习的能力
第二天收到HR面邀请
