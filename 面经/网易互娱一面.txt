自我介绍

C++的多态是怎么实现的
    多态是分为静态多态和动态多态的
    静态多态主要是用了重载，重载是同名的函数，根据参数类型不同，调用不同的实现。编译器会把函数根据参数类型给它一个名称修饰，编译的时候会根据名称修饰找到对应的函数去调用
    动态的话是基于虚函数来实现的，虚函数就是每个对象的头部会有一个虚函数表的指针，运行时调用的时候先去虚函数表找到对应的虚函数地址，然后再调用对应的虚函数
虚函数表是存在哪个空间里
    虚函数表是存在文本常量区的，每个对象是有自己的虚函数表指针
所以new一个对象的时候会额外申请虚函数表的空间吗
    不会

C++的inline原理是什么样的
    inline原来是表示建议编译器把这个函数展开，把它展开到调用的地方，就是不生成这个函数的body，而是直接放在对应调用的地方。后来它是变成了允许重定义的意思，就是可以在不同的编译单元多次重定义这一个函数，或者C++17之后也可以用在变量上面

C++的运行过程中它的内存是怎样的分布，每块内存分别有什么功能
    我比较熟悉Linux那个内存分布啊，Linux是分为栈、内存映射区、堆、已初始化的数据段、未初始化的数据段、文本段。数据段还有堆、栈是用来存储数据的；栈是用于一些局部变量；堆主要是用于new或者malloc申请出来的内存；内存映射区也是用于动态申请的内存的；文本常量区主要是用于代码的
C和C++分别有一组内存申请和释放的函数，它们分别有什么区别
    C语言的话主要是malloc，C++主要是用的new
    new可以指new表达式或者new运算符，new表达式内部其实是调用了malloc进行内存分配，然后会调用类的构造函数，最后返回的是对应类的指针类型
    malloc它不会调用构造函数，并且最后返回的是void指针类型
那释放函数呢
    释放的话，C这边用的是free，C++用的是delete
    同样的，delete会调用类的析构函数
析构函数什么情况下需要声明成虚函数
    如果这个类需要被继承的话就应该声明成虚函数
内存空间在程序运行时的空间，和硬件上的内存空间是什么关系
    我们程序运行时使用的是虚拟内存，真实硬件上使用的是物理内存，这其中会有一个映射关系。操作系统会有分段式、分页式、段页式这种映射关系。现在一般都是用分页式的，Linux就是用分页式的
那每段虚拟内存都会有物理内存做映射吗
    不一定，就是刚分配出来时可能是没有映射的，访问这段内存时会触发硬件的缺页中断，操作系统会处理这个中断，并且给它分配对应的物理内存
如果在进程里创建了不同的线程，这些线程看到的内存空间是什么样的，有哪些内存空间是可以互相看到的
    同一个进程的话，其实线程里面大部分内存都是共享的。线程独有的话可能只有它的栈和TLS之类的
线程之间如果要做状态同步的话，有哪几种方式可以做
    线程的同步方式主要有互斥锁、读写锁、条件变量、信号量

内存就说到这里，网络协议，你这边用的通信协议是哪种协议
    我们游戏用的KCP和TCP都有
那这两种协议分别在什么情况下会用
    我们和客户端连接是用了基于UDP的KCP，我们服务器内部通信用的TCP
KCP和TCP，相对于TCP来说KCP有哪些优势
    KCP主要是牺牲了公平性来换取低延迟，因为TCP是注重于公平性的协议，它遇到网络拥塞时会把RTO * 2，还会把发送窗口降低到一个包或者是原来的一半这样。KCP的话在快速模式下，可以只把RTO * 1.5，也可以选择不避让，就是不会降低发送速率
这是相当于在流量控制上做的事情，有没有其他方面
    比如还有确认啊，KCP是支持此包之前全部确认，还有一个选择性确认，就是可以跳过缺的包，只把其中一些包确认。它重传也是可以选择性重传，只重传缺的包，而不是某一个包之后的所有包
那TCP的重传是什么样，相对于KCP它主要的问题在哪
    TCP的话主要就是它的确认包是确认这个包之前所有包都收到了，那么如果这个包后面缺了一个包，但是后面的包全都收到了，这时不能确认后面的包，所以重传的时候需要把缺的包后面全部都要重传

算法题：
去掉字符串中的空格
    原地修改，把空格以外的字符移动到前面
爬楼梯的方法数，一次可以爬2个或3个台阶
    LeetCode原题改了数据，动态规划，用滚动数组节省了空间复杂度
判断两个二叉树是否互为镜像
    LeetCode原题，递归

大概描述一下做的工具是什么开发流程，包括它在开发流程上有什么贡献吧，还有希望的工作内容是什么样
    我做这个工具的流程一般就是，有运营、策划、QA给我提一个需求，或者我自己在开发的时候遇到了什么痛点就想着去优化一下
    然后先定好一个接口吧，就是前后端交互大概需要什么接口，然后后端建一下数据库的表，后端去写接口的实现，前端再去写界面。同时做的时候还要多跟需求方沟通，就是看有什么不请求的需求，或者是他们对这个结果满不满意
    我这边优化的贡献主要就是，我优化了开新分支的流程，因为之前是比较繁琐的，而且容易出错。我把开新分支从15分钟改到了大概3分钟这样，而且大大简化了配置的过程。还有其他一些比如会做一些拷号的功能，还有发送GM命令的功能，还有模拟抽卡的功能，就是方便我们的策划、运营、QA，方便他们操作服务器的
你们服务器代码是放在git上的吗，为什么在git上开分支会有操作繁琐的情况
    倒不是git上开分支比较麻烦，因为我们开分支会开一些相应的自动化任务，就是Jenkins那边开它的任务
大概理解了，因为你们服务器本身有一套适配Jenkins的流程，所以服务器分支在新建的时候需要Jenkins里面要有一个配置和git中对应
    是的，之前是每个分支要开一个新任务。所以我就把它的配置移到数据库里了吧，然后只用一个任务就可以完成每个分支的构建
就是通过在任务上加一个参数去做的是吗
    是，不过参数会有点复杂
所以做了参数固定化的功能
然后你希望的工作内容是什么样
    主要是希望做游戏业务吧
还是希望上前线是吧。这个要求倒是挺容易满足

数学题：
两个人抛硬币，求先抛硬币的人首先抛出正面的概率
    结果是 求和 (1 / 2)^i, i = 1, 3, 5, ...
    不记得等比数列的求和公式了，面试官提示想想两人概率的关系
    a = 2 * b
    a + b = 1
    解出 a = 2 / 3

反问
    你们技术栈是什么样的
        技术其实和你比较相近，我们脚本层是Python，引擎层是C++为主
    你们是用那个KBEngine吗
        不是。网易互娱这边是有自己的引擎在做，从天下这边开始做起的，做了好多年。和云风他们用的那款是差不多的，和skynet差不多，因为他是网易出去的嘛，架构是一套架构，然后在这基础上重写了一版。他们是Go吧，网易这边还是用Python在写
    工作氛围怎么样
        工作氛围还挺轻松的，这边团队规模普遍是偏小的，我们组程序大概（XX）个左右，所以是非常扁平化，所有人基本上都在一线。基本上是这样的情况，但个别项目，做得好的项目规模会大一点，但是网易大部分团队基本上都（XX）人。总体来说生产力上，比（上家）要差一点，但是项目各方面接触会多一些，各个方向都做一些。跟（上家）和腾讯大概会不一样，你们大概好几百人一个团队吧
        人特别多的时候，管理上多少是个问题，像我们团队人特别多的时候，管理会有压力，现在这个规模还好
    你们这个游戏我看了PV，没太看出是什么类型的
        游戏类型现在还在打磨，战斗方面是做了不少。虽然是PV，但是大部分是实机录制的。战斗类型是偏向即时制的，至于世界观和游戏类型，现在还说不好，现在还在打磨中
    像是开放世界动作类游戏这样吗
        做不做开放世界，可能不会做原神这么大的开放世界，因为我们没有这么多人。动作类是会做，具体做成什么样，我现在没有太长远的想法，因为我不是那边项目的主管领导，我们是一个工作室的。二面的话是那个项目的主管，到时候你可以找他聊一下


------
网易这边还是偏八股文和算法的，算法这边反正我摆了，刷了LeetCode差不多400道题，万一后面遇到不会的就算了吧
一小时之后收到二面邀请，效率挺高的
