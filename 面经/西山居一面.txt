自我介绍
为什么转岗

管线主要是做哪些事情
    服务器构建
    数值构建，Excel表转成txt格式
    代码静态分析，Coverity

工具是做了什么
听起来有点杂。你是来什么需求就做什么吗
    我自己也会找开发时的一些痛点，比如给编辑器加上了clangd的功能
好像和你这个工具扯不上。你会控制游戏服务器嘛，用什么和游戏服务器进行通信
    操作数据库里的配置
    通过SSH协议读写文件或者执行命令
    通过游戏服务器暴露出的HTTP接口请求
你们游戏服务器还要单独开发HTTP接口吗
    主要是给内部平台用的
那正常的通信是用什么协议
    TCP，我们自己造的一个协议，基于protobuf的
    差不多就是头部长度、body长度、序列化的头部、序列化的body
protobuf怎么还需要头部
    就分包的时候需要一个长度啊，还有需要一些元数据，比如CMD、UID、Session ID，这些是要写到头部的

服务器开发当时是做了哪些功能
协议频率限制是怎么设计的
    解释了令牌桶算法
    是给部分协议用的，可以配置
    没有一个单独的令牌服务器，就是做在自己的进程里面的
    也不是全局的类（对象）吧，就是每个连接一个类（对象）
你虽然是限制了单个玩家，但是玩家可能比较多，还是可能导致服务器过载，有没有考虑
    （面试官可能以为这个是用来防止过载的，但是防止过载主要是靠限制worker线程的消息队列长度，算是漏桶算法）
    我们是worker线程有消息队列，然后会限制消息队列的长度，如果超过阈值就会把消息丢弃掉
但是你走TCP，又会把消息丢弃掉，会不会对整个游戏带来一些未知的影响
    其实我们开发时是假设每条消息都是有可能丢的
    即使用了TCP也可能网络会有问题的吧
TCP不是确保不会丢包吗
    不能这么假设，就算用了TCP，网络也可能会突然中断
你刚才提到了消息队列，你们不是会缓存消息吗，缓存消息也可以避免丢失吧
    （一开始没分享架构图和线程划分，这里有些误解）
    我们是分网络线程和worker线程，网络线程收到消息发送给worker线程的消息队列，是做这个用的
你们怎么假设所有消息都会丢呢
    实际上大部分消息丢了就丢了，只有少部分重要的，比如一些结算的消息，我们会在本地做一个缓存。需要相应的服务器做一个确认，如果没有确认的话下一次再把这个包发一遍，直到收到确认为止
是客户端对重要协议做重发吗
    是服务器内部通信

网络库是自己实现的吗
    是用了Asio
    就是Proactor模式嘛，具体是用协程来实现的
协程啊，那你们用的版本挺新的
    没有，就是Asio（Boost）自带的协程啊
协程和线程有什么区别
    （这里语言组织不太好）
    协程是在用户级可以自己切换嘛
    协程一般是在同一个线程里去执行，多个协程是交替执行的，而多个线程可以同时执行
    协程是用来简化一些异步编程的，因为如果都用线程的话上下文切换会很慢，因为要涉及到内核态的一些切换，要内核态去调度，但协程就直接在用户态调度就完了
协程是怎么保留上下文
    协程分为有栈协程和无栈协程
    有栈协程就是暂停的时候会保留栈的结构，所以它的局部变量都是存储在单独一个栈里面的，切换的时候就是要把栈切换到另一个栈
    无栈协程局部变量是存储在堆上面的。无栈协程像是一个状态机一样，会记录当前调用到哪个指令，然后唤醒它的时候就是跳到相应的指令去执行
Asio它是无栈还是有栈的
    它是有栈的
C++这边有无栈的吗
    C++20加了一个标准的协程，它是无栈的
    面试官：有栈的，它没有做到无栈（我读书少，你别骗我，确实是无栈的）

你用的版本是多少
    我们用C++17
有用到哪些新的特性
    17的话用到的不太多，主要是结构化绑定吧，就是auto然后中括号那个
        Lambda是吧
        呃不是
那右值引用有了解吗，它拿来做什么
    引入右值引用就是为了消除深拷贝的，因为容器可能要移动到其他地方，比如原来的容器已经不用了，然后想把它移动到一个新的地方，这时候就可以用右值引用
    它其实就是把底层的指针给交换了，不会拷贝指针指向的内容，所以就很快

你们排行榜是实时刷新的吗
    就是客户端来个请求客户端（显示的状态）就会刷新，服务器这边都是实时的
    对于客户端来说，我们不会主动推给它们，就是客户端来拉
怎么做这个实时的排行榜
    客户端打完关卡会上报分数嘛，我们判断分数如果比他之前打的要高，就上报到排行榜这边
    排行榜这边是用Redis实现的排行榜，就是用Redis的Zset，把UID对应的分数存到Zset里面
你们一个区大概是多少人
排行榜是算总用户数吧
    其实看玩法吧，需要排行榜的玩法不多，一般是一个榜5-6w这样
那应该没有什么性能问题。你是用了Redis的数据结构嘛，如果是自己实现你会用什么数据结构
    我会用map吧（百人级别的小型排行榜就是自己实现的，用了map，不过如果要查UID对应的分数就需要遍历）
那为什么不直接用map还用Redis
    我们要一个数据库来保存吧。要持久化，不然进程一重启就没了
但你相当于分数拷贝了一份，这个更新依赖于到排行榜服务器的包嘛，如果包丢了那这个分数岂不是旧的
    这种其实就是需要重试的包
但就有数据一致性的问题，玩家自己也要存这个分数
    其实用了这么久问题也不大，万一出了什么问题了我们有运营的手段去解决
    就是事先留一些接口去重新发排行榜的分数，不过是要运营手动去确认的
    刷的时候就是用玩家自己的数据了

Redis集群高可用这些有了解吗
    我了解Redis那几种集群方式吧，主从复制、哨兵模式、集群模式
    解释了主从复制的过程
    哨兵模式就是在主从复制的基础上面加了哨兵节点，监控每个节点的状态，如果主节点宕机了，哨兵节点会负责主从自动切换的功能，把一个新的节点提升为主节点
    集群模式就是把Redis里面的key分成16k个哈希桶，每个节点负责一部分哈希桶里面的key
那扩容是怎么扩呢
    加一台机器就是现有的结点把一部分的桶迁移到新的节点上面
其实也没这么多种集群模式，只是主从是谁来切换的问题
那哨兵模式的切换是怎么做的，客户端是怎么知道切换了
    它是通过Pub/Sub机制通知的，哨兵切换完之后会发布一条消息，用subscribe去接收这条消息
Redis客户端会连一个服务器嘛，正常是直连主节点嘛，假如主挂了，哨兵把一个从切换为主了，那么客户端是怎么知道的
    还是没太理解，它就是通过一个Pub/Sub的机制，具体是从哪个节点接收到的我忘了（其实是客户端还要连到哨兵节点，在哨兵节点发布的）
如果客户端配两个连接，一个主一个从，如果主连不上了再去连从，会有什么问题
    从节点一般是只读的吧，可能你会去写一些数据
如果加一条协议，确认节点是不是主的可以吗
    那就是说客户端要知道所有节点的信息吗
对，这样是挺麻烦的，需要事先配好所有节点的信息，有没有更好的办法，一开始不需要知道
    （还是没明白在问什么）
    就是通过Pub/Sub啊，哨兵节点完成切换之后会把新的主服务器的IP和端口等信息通过Pub/Sub发送到客户端
那客户端是要同时连哨兵节点和主节点了，因为哨兵节点不知道有哪些客户端去推送，除非客户端直接连到哨兵节点
    应该是这样吧
那如果这样我可以认为哨兵节点和主节点负载是差不多的，因为要和客户端连接嘛，那哨兵节点的负载会不会很高
    （你在说什么，哨兵节点又不负责存储数据）
你是看资料在学是吗，有没有自己实操过。你们应该搭集群了吧，搭的是哪种
    我们其实用的云服务的
那你有没有了解
    看过Redis集群这种文章吧
你们自己的服务器有没有用上集群的方式
    （还以为在说Redis，其实问的是游戏服务器）
    看具体的业务吧，我们Redis有存哪个玩家登录到哪个gameserver这种信息的，因为这些信息还是蛮庞大的，所以用了集群

你们的（游戏服务器）集群方案是怎样的
    用图片介绍了一下架构（早些时候你不问）
gateserver是无状态的吗，那客户端随便选个gateserver连接
    客户端一般是通过dispatch去获取一个gateserver，因为我们要做负载均衡
nodeserver是干什么的
    nodeserver负责连接内部各个服务器嘛，用来做消息路由
无状态的，如果要增加一台dbserver，需要怎么更新
    我们服务器配置是存在数据库里面的，服务器进程定时去拉数据库然后更新自己的配置
整体服务器架构还是比较简单的，不过已经够了，基本情况都有考虑到
    我们还是偏单机玩法的游戏
服务器只是做一个结算吗，战斗会有验算吗
    战斗会有加密什么的
那其实你们不需要一个战斗服务器
    就除了联机会有一个单独的服务器吧，玩法都是客户端内部自己计算的
那确实还行。那你有什么问题吗（才问了40分钟，话题转太快了，没反应过来）

反问
    工作氛围怎么样
    也没有这么卷是吗
        我说的是整体嘛，卷的话看项目，有的项目可能就很闲，有的项目加班就比较狠（这么说你们加班很多了）
    你们这个是什么项目
        我们是一个TPS端游的项目
    是剑网IP的吗
        不是，是公司新赛道，是一个科幻类题材的
    有用什么技术栈吗，或者框架
        就是自研的一套框架，包括服务注册、服务发现一整套，网络库都是自己实现的


------
没有算法题，主要还是问架构，还有一些功能的实现
其实应该一开始就展示架构图，不然中间有很多误解
面试官C++20的协程类型说错了，Redis的Pub/Sub感觉也没有理解，其他感觉还行，没有太为难我
