（背景：上海部门挂了后被HR推到广州部门了，项目组是三国志战略版。JD写的是要5年经验的资深开发，但是我的简历过了用人部门的筛选，决定试一试）
自我介绍
离职原因
我们这边是在广州的，假如我们有缘的话，对这是怎么看呢，毕竟涉及到迁移城市

死循环检测是怎么做的，背景是什么
    我们之前出过几次事故嘛，我们希望增加服务器的健壮性，就是如果出现死循环，我们希望能够检测到它然后及时给我们发出告警
    死循环检测它是类似看门狗的机制，每个worker线程处理完消息空闲的时候，就会更新一个时间戳。然后另外有一个监控线程去定期检测每个线程的时间戳，如果它很长时间没更新过，说明可能是遇到死循环了
你们的服务器是多线程的对吧，它的架构你清楚吗
你的死循环检测是做在哪部分
    主要是gameserver，因为gameserver会有很多个逻辑线程
你清楚每个线程是怎么分配工作的吗
    会有多个网络线程多个逻辑线程嘛，网络线程它是负责收发包的，收包的时候解析出一个消息，消息里会有UID，根据UID哈希去分配到某一个逻辑线程。所以每一个线程是会负责多个玩家，但是对于单个玩家来说，它是只在某一个线程里去处理的
其实也是游戏类型决定的，它不会出现玩家之间交互的状况
    对，我们玩法还是偏单机的。像是联机这种，或者要搞什么全局活动的话，它可能是在其他模块去进行。我们联机会有单独一个模块，多个客户端去连到一个单独服务器去进行联机玩法

你还做了一个排行榜，讲一下是怎么做的
    我们排行榜是分为两种，都是实时的，一个是全量的，就是上报的玩家全部都要保存下来，另一种是只保存前几百名这种排行榜。全量的话我们是通过Redis去做的，用了Redis那个Zset的数据类型。前几百的话我们是通过map去做的，直接做在进程内部里面去维护这个排行榜
map去做的是什么意思，具体讲一下
    我们是用了STL的map结构，因为map本身是红黑树实现的，它自己就是有序的。我们是以分数 + 时间 + UID作为一个key去存到这个map里面，它的value就是玩家信息
那如果我的分数更新了，它的过程是什么样
    首先要看榜上面的玩家是否到上限吧，如果没有到上限就直接插进去。如果到了上限的话，先看玩家原本在不在这个榜上，如果原本在榜上就把他删除，然后再重新插入。如果原本不在榜上，去比较一下它和榜上面最低分的哪一个更高，如果他大于最低分哪个，先把最低分的删除掉，再加到榜上去
假如我想查询一个玩家是第几名，你是怎么查的
    因为我们榜单会比较小，它只存储前几百这样，所以现在是通过遍历的方式去查
那你有什么更高效的方式去做吗
    比如我们可以自己实现一个红黑树或者自己实现一个跳表，然后去维护各个结点下面有多少个结点这样吧，然后可以用一种二分查找的方式去找
具体讲一下，你刚才说了很多种啊
    比如跳表的话，跳表它是一个双向链表的基础上面然后加了很多索引层，索引层结点数会比较少，查找起来是类似于二分查找，会比较快。跳表它是可以维护这两个结点之间共有多少个结点，所以比如要找第100名的话，就是要排除掉前面99名，可以根据两个结点之间的结点数去排除掉前面的99名，就可以找到第100名
你刚才说的还是二分查找，那如果我想要更高效的方式还有什么方式吗
    可以用哈希吧。比如第1到10名存一个桶，10到20名存一个桶，然后根据名次计算出它在哪个桶里面，直接去桶里查找
但是我想的是从UID拿出它排第几名，而不是拿第几名的UID
    哦，那可以维护一个UID到桶的映射，比如用unordered_map，它的key就是UID，它的value就是在哪个桶，迭代器什么的
刚刚还说到另外一种，就是全量的排行榜用Redis来做的，是怎么做的
    是用Redis那个Zset数据结构嘛，因为Zset是一个有序的集合，用它的分数还有UID存到这个Zset里面
你有了解过它的实现吗，它是什么数据结构
    它底层就是跳表嘛，跟刚才说的一样
那你这个数据有存盘吗
    我们是直接存到Redis里面，Redis它会有一个持久化的机制
你刚刚说到跳表，那跳表插入一个元素的过程是什么样
    首先根据二分查找找到一个插入的结点，把这个结点插入进去，然后Redis的话它每插入一个结点会有1/4的概率去生成上一层的结点，就根据这个给它生成一些索引层

你有了解过什么数据库
    主要就是MySQL还有Redis
MySQL它的索引是怎么实现的，用什么数据结构来做的
    MySQL的索引是B+树嘛，它是一种多叉树。它是非叶子结点只存储索引不存储数据，只有叶子结点存储数据。它的各个叶子结点之间是用双向链表连接起来的
为什么用B+树，它有什么好处
    跟红黑树相比的话，它是一种多叉树，它的层高会比二叉树小很多，因为每一层需要一次磁盘IO，层高小了，磁盘IO就会少很多，所以读取起来会比较快。然后它非叶子结点是不存储数据的，这样能容纳更多的索引结点，也是起到了减少层高的作用。跟哈希比起来，B+树是有序的，它对范围查找会比较好，哈希对范围查找不那么好

Python你用了多久
    大概有7年吧
你清楚它的GC吗
    Python的GC它是引用计数和GC相结合的。引用计数就是这个对象被引用了多少次，如果引用计数归零了就可以把这个对象回收了。如果出现循环引用的话，这个引用计数就不会归零了，这时候是依赖于GC去将它清除的
    Python的GC是一个标记清除法，首先是stop the world，就是把整个进程给停下来。然后对于容器类型先遍历容器，然后把它们元素的引用计数-1，最后根据引用计数是否为0，把它分为可达和不可达的两个集合。这个过程完成后还要再遍历一遍可达集合，将可达集合引用的对象也标记为可达。最后剩下的那些不可达的东西就是可以回收掉的
因为它要stop the world，但像Go其实是不会stop the world的（其实也会，只是时间很短），你知道它是怎么实现的吗
    （我对Go只是了解，这也要问吗，还好GC相关的记得一点）
    Go的话我记得它应该是一个三色标记法吧，它是把GC分了很多个步骤的，会把对象标记为什么黑色、白色、灰色啊。反正就是分了很多个步骤吧，有些步骤是需要暂停的，大部分是不需要暂停的，所以相对起来会比较快
具体的就是只知道原理，没有了解具体的经过是吗

你在（上家）那边也是C++用得比较多是吗
    对，我们服务器全都是C++写的
怎么处理BUG
    像线上更新的话我们是有两种方式。一种是灰度发布，就是一部分是新版本一部分是旧版本，更新的时候先把流量给切到其他服务器去。然后再把这个服务器给更新掉，然后重启
    另一种方式是用了hook的方式，就是把新的代码编译成一个so库，然后我们的主程序会去加载这个so库。它可以获取一个需要替换的函数列表，对于这些函数，它会在函数开头写一个JMP指令，jump到新的函数嘛
既然有第二种为什么还要用第一种
    因为它不是万能的吧，就是你可能做一些比较大的改动，比如你改了函数的签名，改了参数类型，那直接jump过去的话就会不兼容，或者改了数据结构什么的

你做过一个协议缓存，这个是做什么的呢
    其实相当于一个数据缓存吧，因为我们会有一些单点的服务器，我们会有一些全局的活动放在单点服务器上。我们不希望这个服务器它负载太高，所以可能就会对它返回过来的协议做一个缓存。我们会对一些实时性不这么重要的协议，而且客户端可能去频繁请求的，会去做一个缓存。比如客户端可能打开活动页面的时候会去拉一下活动信息，这些活动信息可能实时性要求不那么高的。我们在gameserver内部会做一个全局的LRU缓存这样，请求来的时候直接用缓存内容返回给客户端
那这样如果它更新了，岂不是客户端拿到的还是旧的
    是啊，所以都是一些实时性不那么重要的吧。然后我们会去设置一个超时时间，比如10秒超时一次，那10后这个缓存就是失效了，要再去重新拉一遍

你平时有玩什么游戏吗
    我个人喜欢一些动作类的吧
比如
    像FS社的，比如只狼、血源、黑魂
不会玩起来很折磨吗
    就个人比较喜欢吧，因为这种比较有挑战性，你要去动脑。而且其实作者设计得不会很死，它是有很多奇技淫巧可以过去的
只狼你通关了吗
    通关了
那你有玩什么SLG的游戏吗
    都是以前玩的吧，以前玩的信长之野望啊，包括三国志也玩过一些，比较小的时候玩的
三国志是哪个版本
    以前玩的应该是三国志8（记错了，应该是三国志11，因为有舌战）
挺老的。因为我们这边是做SLG游戏的，可能会对这些比较看重

很多SLG其实都是会有一个很大的地图啊，像三国志8会有一个中国地图嘛。但是我们不会这么简单，我们是一个1500 * 1500这么大一个地图，上面可能有各种的关卡、山脉、河流之类的地形。然后会涉及到寻路啊，你有了解过什么寻路算法吗
    （FunPlus也问到寻路、定时器、AOI算法了，看来SLG游戏比较看重这些）
    像游戏的寻路算法主要就是AStar嘛。AStar它是像DFS（说错了，是BFS，而且这里不应该是BFS，是最佳优先算法）与Dijkstra……呃应该是Dijkstra和最佳寻路算法的一个结合吧。它会根据一个启发函数，就是下次遍历的结点，它会有一个优先级，根据启发函数去选择这个优先级
那你刚刚说的A星和Dijkstra算法，它们的区别是什么
    （这里语言组织不太好）Dijkstra它是优先遍历最短的那个嘛，就是当前结点到起点最短距离的那个结点。A星的话它是有个启发的，这个启发函数可能是当前结点到终点的距离，所以它是会把这个考虑在内的，像DJ的话它只考虑了当前结点和起点的距离
那我这么问，这两种算法它们的适用的场景是什么
    Dijkstra它是找到最短路径嘛，AStar它找到的不一定是最短路径，它可能是一个比较合理的路径，但不一定是最短

SLG有时地图上会有很多军队，其实一般就是一个定时器了，只要地图上有军队在至少就会有一个定时器，那么如果有成千上万的军队在那定时器数量会很大，那你知道有什么定时器的算法可以来优化这个调度的算法吗
    定时器的话主要有最小堆还有时间轮这两种。最小堆是把超时时间作为key存到最小堆里面，最小堆访问最小那个结点时间复杂度是O(1)的，但是删除或者添加的话时间复杂度是O(logN)。
    然后时间轮是用了哈希的思想，它是分成多级时间轮，每级里面会有多个槽，然后根据超时时间去计算出这个定时器应该放在哪个轮的哪个槽里面。然后每个轮会有一个指向当前槽的指针，去更新定时器的时候就是把这个指针往后移动，并且对槽里面的定时器做一个回调的处理。然后时间轮的时间复杂度是O(1)
最小堆比如我想删除一个定时器，它的过程是怎么样的
    首先把堆末尾的元素给替换到根元素，然后对根元素（被打断）
是删除中间的定时器，而不是删除根
    其实也差不多，就是把末尾的元素和中间的结点交换，删除末尾，然后把中间结点元素向下调整。就是跟子结点比较，将它和较小的子结点交换，一直调整到最底层这样
    （错了，有时是向下调整，有时是向上调整，参考 https://www.zhihu.com/question/53556300/answer/1713113192）
有没有可能需要向上调整
    因为最末尾的元素不可能是最小的嘛，你是拿最末尾的元素替换上来，所以一定是向下调整

你在（上家项目）那边做了挺久的工具，那你做得最有挑战的工作是什么
    我们有一个发布数值的功能，就是策划会导出很多数值文件，然后这些数值文件要发给线上的服务器，也要发给所有的客户端。我这边的过程就是，比如运营在我的网页前端点击一个按钮，说我要发布这个版本的数值到线上。我这边是从公司内网把它上传到一个外网的中转站吧，比如我这边会上传到阿里云的OSS，或者对于海外就是AWS的S3。上传完之后，再发一个任务，把中转站里的文件再传到服务器去，或者就通知给客户端
    这里面是涉及到公司内网、外网的IDC，可能还涉及到海外，还涉及到各种云服务，比如OSS、S3。包括最后发布数值到服务器上面也是需要运维的参与，因为运维那边会提前在我们的机器上部署很多的agent，通过这些agent来把数值下载到服务器本地，然后再去加载这样
你会先上传到一个中转站，为什么不能直接传给服务器那边呢
    因为直接传到服务器的话，它是从内网传到外网，对每一台服务器都这么传的话它会非常非常慢。但是如果我先传到OSS的话，因为每一台服务器都是在阿里云上面的，阿里云可以直接从OSS内网去拉这个数值。所以就只用走一遍外网，剩下的全都是在内网可以搞定了

存盘的机制你了解吗，具体讲一下
    我们玩家数据是先从db加载到gameserver，gameserver相当于玩家数据的缓存。然后有两种保存玩家数据的时机啊，一种是定期去保存，比如2分钟或者5分钟去保存一次。另一种是如果当你操作什么重要的数据，比如充值或者抽卡之类的，这时我们会立即给它生成一个保存的消息
    保存的话就是我们gameserver会先序列化玩家数据，序列化到一个消息里面，然后把这个消息发送到dbserver，由dbserver那边保存到MySQL。dbserver它本身有个循环嘛，就循环保存的一个队列吧，如果保存失败了它会自己去重试，直到保存成功为止。然后成功之后它会给gameserver发一条消息，说我保存哪个版本的玩家数据保存成功了。比如玩家下线的时候吧，当你收到这个成功的消息，才可以把这个玩家数据从缓冲中清除掉，然后如果很久都没有收到这个确认消息的话，说明可能是丢包了可能是失败了，那需要重发一遍这个保存的包
那你们每一次都是把玩家全量的数据序列化之后去存盘对吧，这样消耗还挺高的，因为玩家数据可能挺大的
    我观察过啊，一般最多就100多K这样，也是跟业务有关的吧。然后我们有限制最多不会超过256K吧，当玩家数据接近这个量的时候会触发一个告警。所以我们会控制业务逻辑啊，优化玩家数据的大小，不让它变得太大
但是随着游戏运营越来越久，数据难免变得越来越大，那怎么处理，总有一天会面临的
    现在主要还是靠监控吧，靠我们自己去限制玩家数据
然后你们是把整个玩家数据序列化成一个字段吗，还是MySQL那边一个属性就一个字段
    一些比较基础的数据是分成单独的字段，比如昵称、等级、经验什么的是单独一个字段。其他那些数据全都是序列化到一个二进制字段里面去
那经验变化操作还挺频繁的，每次变化就得把整个序列化，还是挺蛋疼的
    倒不是字段变化就会去单独存一遍，因为我们还是一起去保存的，整个玩家缓存一起去保存。像经验变化这种也是跟着缓存机制一起去保存，它不会很频繁
如果现在想做一个功能就是哪个字段变了就存哪个字段，你有什么方案吗
    那我们现在这个设计应该是不行了（被打断）
如果让你来做，就是一个新项目让你带，你会怎么考虑这个问题
    其实这个是看游戏类型吧，看业务什么的。比如你可能分成多个系统，比如背包系统，然后玩家等级信息啊，玩家好友之类的（被打断）
你这个分法也就是按照业务来分，但我刚刚的需求是哪个字段脏了就改哪个
    这个可能会比较复杂。可能我逻辑和存储分开吧，存储层是有完整的玩家数据的，各个字段它都可以读写到。逻辑层需要的时候就去存储层单独拉一下，比如某几个字段，逻辑层自己计算完之后把我要修改哪个字段，改成什么值，再发给存储层那边。存储层就根据字段名去修改对应的值就可以了

AOI的算法有知道哪些吗
    有了解过，主要是九宫格、灯塔、十字链表嘛
九宫格跟灯塔有什么区别
    按我的理解的话，九宫格它不是固定在地图上的，灯塔可能就是固定在地图上的。比如我把地图每隔一段分成一个格子，然后假如玩家在这个格子里面，我的视野就是固定的附近9个格子。像九宫格的话可能，先计算出玩家附近的格子是什么，然后再去遍历这几个格子，去找出实际上哪些实体是在视野范围里面的
那两种的应用场景分别是什么
    我觉得他们两个实际上就是差在这个视野范围是不是严谨的嘛。比如可能做一个PvP游戏，我可能不希望视野范围外的信息被玩家给感知到，那么实际上就要把这个视野限制得更死一点。比如做什么MMORPG，它实际上不需要这么严谨的范围，就直接和地图固定的视野就可以了
那十字链表呢，你觉得他们的优劣势分别是什么
    划格子的话可能格子里面的负载不均衡吧，就是有一些格子里面人数会比较多，剩下那些格子基本上没有人什么的。十字链表的话其实就是划分可以更加精细一点吧
怎么说
    十字链表的一种优化方法就是每个实体会有两个哨兵结点嘛，当其他的实体跨越过这个哨兵结点，说明它可能进入或者出了这个玩家的视野。那么跟格子方法比起来的话，就不需要再去遍历一遍，这些桶里面有哪些实际上在我的视野范围内的。因为只有跨越哨兵结点的时候，它才是进入或者出了我的视野
假如像做这样的功能，有些游戏里面BOSS怪物它的可视范围会比较广，我可能远远就能看到它了，然后一些小兵可能要走近一些才能看到，那对于这个需求，刚刚三种做法里面挑一种出来做，你觉得怎么做
    可能用十字链表会比较好，也是用那个哨兵结点嘛，小怪的视野范围会小一点，所以它的视野范围距离它本身会比较短（被打断）
不是小怪的视野，而是别人看到它
    （还以为在说怪物AI怎么寻找敌人的，这里答歪了。其实可以用多个哨兵结点，距离远的的结点用来观察BOSS，距离近的用来观察小怪）
    BOSS视野会比较长，它的哨兵结点会距离它远一点。视野管理它是分为观察者和被观察者的，像怪物AI的话它主要是用被观察者列表。可以根据是否跨越了哨兵结点去维护这两个列表，然后AI计算的话实际上就是关注被观察者列表里面的实体

你在（上家项目）是做过一段时间线上需求是吧，讲一个你出过的印象深刻的线上BUG，当时的背景是什么，你是怎么处理、跟进问题的
    我们会用到一些协程吧，我们是如果要向其他服务器拉取一些数据时，会创建一个协程，拉取完毕了再将这个协程给唤醒。当它唤醒的时候其实这个玩家对象可能已经销毁了，这时候再去访问玩家对象会出现一个内存错误，Linux它是会生成一个coredump的。coredump会触发我们运维的告警，当时我们看到这个告警就去登录服务器，然后用gdb看coredump是运行到哪里了，推断出它可能是玩家已经销毁了这样的错误
    当时临时的解决方法就是在协程唤醒的时候再去判断一遍，这个玩家是否销毁，如果已经销毁了那就直接返回。事后我们复盘的时候觉得，这个做法可能不太好，因为不能指望每一个人都去检查，每一个人在写这个协程的时候都去检查一遍上下文。而且返回的话，可能上层函数也用了这个玩家对象，上层函数你也不能指望它是检查过玩家对象是否销毁的。所以后面我们迭代就是改了一下玩家的下线机制，把它改成如果你有协程没有运行完的，就暂时不让他下线
那有没有可能出现协程访问别的服务，一直没有返回，那会不会导致玩家一直下不了线呢
    因为我们都是做有超时机制的，如果要用协程去发一个远程调用的话，我们会强制给它一个超时，比如10秒还没有完成的话，那就强制唤醒
那就是理论上玩家最多会被卡10秒才会下线对吧

你简历上还写了TCP和KCP的，TCP和KCP的区别是什么
    TCP是一种传输层协议嘛，它的特点就是保证可靠啊，不会乱序啊，然后是基于字节流的。然后KCP它其实不跟某个传输层协议绑定，KCP它是一种重传确认的算法库吧。我们可以基于UDP和KCP去实现一个可靠的UDP连接
    因为用了UDP，它会比TCP灵活很多，比如RTO，像TCP丢包的时候RTO会 * 2，那KCP的话可以RTO只 * 1.5
    然后KCP它是有一个选择性重传，因为TCP的确认包是确认这个包之前的包都收到了，那么如果中间缺了一个包，但是后面的包全都收到了，发送方还是需要从缺的包开始全部重传，那KCP的话可以只重传丢的那个包
    然后KCP本身是可以阉割掉那个拥塞控制的，比如拥塞发生的时候我可以不减少发送速度，所以可以保证这个延迟会很低

你平时有看什么书吗
    最近的话对Go比较感兴趣，所以算是在学Go，最近在看Go的标准库啊，然后学习它的语法
    之前的话我也是看过什么Effective C++啊，代码整洁之道之类的
    （最近确实没看，说的都是之前的）
你是有空去看还是坚持每天一段时间去学习的
    有空去看吧
那频率大概是多少，一个月一次，还是一个星期一次
    我估计是一个月一次
那不是很多时间在看啊
    最近主要还是忙着准备去面试

你有了解过skynet这个框架吗，稍微讲一下对它的理解
    skynet它其实是实现了一个Actor模式嘛，就是像Erlang那样的。它是每个Actor只操作自己的内存，不会去直接调用其他Actor，直接访问它们的内存，Actor之间都是通过消息去通信的
    skynet的话它是有一个全局的消息队列，然后消息队列里面又分为次消息队列，次消息队列里面就是具体的每一个消息。它是分成多个worker线程的嘛，worker线程首先先去全局消息队列获取一个次级消息队列，然后会去消费次级消息队列里面的一条或者多条消息。消费完了如果还有消息的话再把它重新塞回全局消息队列里面。这样它会保证一个线程安全吧，因为同一时间只会有一个worker线程获取到一个次级消息队列，所以不会有多个线程同时去操作一个Actor
skynet一般是跟Lua一起用的，那Lua你有去了解吗
    学过一点啊，但没有正式用过吧
大概知道语法，但没有具体写过

反问
    你们技术栈是什么样的
        （问出来就反应过来是废话了，这不是云风大佬的团队吗）就我刚才问你那个，我们最多用的就是skynet + Lua
    听说你们有用Go去重写这个框架，有吗（网易说的啊）
        没有，至少我们这个项目没有在用
    你们平时工作氛围是怎么样的
        工作氛围我觉得还算挺轻松的吧（啊这么短就完了）
    就是都比较融洽，也不卷什么的
        卷这个问题其实对不同的人看理解会不一样，就可能你觉得卷，我可能觉得不卷，别人也觉得就刚刚好

我还有个问题就是，如果你过来的话，你对技术转型是怎么看的，会不会有那种你更希望去学习另一个技术栈
    没有，我都挺愿意的，因为我本身接触的语言算是比较多吧，像现在也开始去学习一些Go之类的


------
这个岗位本来要求是比较高的，所以各方面问得比较深吧，最后会暴露出一些错误
有些方面确实掌握不够熟练，多说了一些废话，希望能展示自己的知识面广
SLG类型还是要加强寻路、定时器、AOI算法方面的知识
