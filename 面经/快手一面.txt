自我介绍

之前的项目介绍
登录流程
    从dispatch查询gateserver
    账号认证，请求内部平台
    登录
    gameserver对Redis CAS，防止多登
如果已经登录怎么处理
    gateserver发送到已经登录的gameserver
    如果是同一客户端就不管，否则踢掉旧的客户端，替换成新的
会频繁顶号吗
    有顶号的CD
有战斗吗
    服务器不负责战斗，战斗都在客户端计算的，客户端打完后把结果发给服务器
    服务器主要是做结算吧

排行榜性能数据有看吗，比如能承载多少排行榜
    具体的数据我忘了，可以说一下线上情况
    线上一个榜最多有5-6w
排行榜压力主要是在更新频率上吧，如果更新比较频繁的话
    我们很少有玩法会有排行榜，就是开一些活动会有排行榜，不过都是很小型的，活动都是100-200人，最大的就是5-6w这样
那（上家项目）PCU这么高，这么多榜单怎么去区分啊，去组织啊，放一个进程上吗
    Redis是有集群的
就是得有一个排行榜的服务吧
那你一个服能撑住吗
那整个国内就一个排行榜服务器吗
    一个区服有一个排行榜服吧
    我们会有不同的渠道、不同的运营需求什么的，就是以前会分什么安卓服、iOS服、PC服这些

像组队的匹配问题你是怎么解决的
    匹配有一个服务器，然后是根据关卡作为key，放到一个池子里面
    然后有个主循环，遍历每个池子，每次抽取几个玩家进来匹配，计算它们各个条件是否可以匹配上，如果能就是匹配成功了，否则就等下一次抽取
那匹配服也是一个进程吗
    是一个进程，其实我们主要还是偏单机的玩法

看你提到KCP这块比较了解，能讲一下连接管理是怎么做的吗
    （不记得了，开始瞎编）连接我们应该是根据客户端的IP和端口，把它映射到一个Session ID，就是一个连接吧
    （
        事后回忆应该是类似于asio_kcp这个库，加了一个握手过程，握手时服务器生成conv传回客户端，KCP用conv标识一个会话
        https://github.com/libinzhangyuan/asio_kcp/blob/5b40a7eef7e8f202cd8e120f685df44e2ce0c891/server_lib/connection_manager.cpp#L146
        不过我们是又封装了一层，下面那层只用conv作为key，不校验客户端的IP+端口，可能会有其他IP伪造conv的问题
        所以在KCP头部又加了一个Session ID，这个是和客户端IP+端口绑定的
        不过感觉conv和客户端IP+端口绑定就行了，再加个Session ID有点多余，不记得为什么这么做了
    ）
那手机玩家的IP可能会频繁改变吗，IP改变后怎么办。（应该是在提示）如果是TCP呢
    如果是TCP的话就断线了，KCP我不太记得了（按照上面的处理方法也会断线）

Reactor模式你能讲一下吗
    介绍了一下Reactor模式
多路复用这块，epoll有两种模式，ET和LT有了解吗
    就水平触发和边缘触发吧
    水平触发是只要还有能读的消息就会一直触发
    边缘触发就是它只触发一次，如果这次不读完，它还有能读的消息，那下一次就不触发了
如果让你写一个多线程网络库，你会用LT还是ET
    我个人比较喜欢水平触发，做起来比较简单吧
如果用LT的话可能，OUT事件你会怎么处理，因为你可能要往外发消息
    （没听懂，还好面试官突然转话题了）
对了，你们的gateserver是用C++写的吗，还是Go写的
    都是C++的
你们的gateserver是用LT写的吗
    啊，我们是基于Asio这个库去实现的

那你对Go的了解是项目里面用了吗
    没有，我个人学了一点
    就是把它官方文档看了一下，我觉得它的协程有点厉害，就去了解了一下
那你能讲一下它那块协程调度吗
    介绍了一下GMP模型
它的协程恢复你有做过吗，就是协程crash了，怎么去保护，怎么去恢复
    没了解过
其实用Go的话，最大好处应该做一套协程的恢复和保护。比如把整个玩家数据放在一个协程上面，然后起一个协程把它保护起来，这样协程crash的话只是逻辑crash了，数据不会丢，然后再把它恢复起来。相当于协程出了任何问题，它只是出现一个单边的问题，下面还会继续进行
    （没听懂，应该是在说recover）

协议频率限制这块能讲下它的数据吗，比如哪些协议频率大概是怎么限制的，它的数据是哪来的
    是运营和开发会评估一下，就是哪些消息频率大概是怎么样，如果是那种耗时很多的就会去限制一下
有哪些协议大概限制什么频率还有印象吗
    我们加这个功能主要是为了防止一些恶意的玩家嘛，可能就是会用大量的消息去消耗我们服务器的资源
    主要就是关卡结算的一些协议吧，因为正常情况可能3秒5秒最快打完一个关卡，所以需要限制一下
是个人级别的频率限制是吗，不是服务级别的。那这种做到玩法去就可以了，就是每个玩法根据自己情况来限制
    我们是精确到了每个协议吧
    还有一种用法就是可能某个协议出了什么BUG，可能临时来不及修，那么就可以限制这个协议，不让它发了
那整个服务级别的频率你们不做吗
    服务的话算是一个漏桶算法
    就是我们网络线程会读取消息嘛，读取完了发送到逻辑线程的消息队列里面，逻辑线程就是从消息队列里面读消息去执行
能把令牌桶算法说一下吗
这里面会有漏洞吗，比如可能隔了很久没有协议，这么长时间可能增加了很多令牌
    桶是有一个最大值的，就是最大容量的限制

你里面提到这个协议缓存指的是什么情况的协议缓存
    就是有一些全服的活动嘛，它可能是在其他服务器上面的，玩家是进一次页面就要拉一次相应的数据，就要请求到这台服务器
    但是我们又不想让这台服务器压力太大，所以就会拉完在本地缓存一份，下一次直接拿缓存去回复
那中间如果出现变更了怎么办
    因为这个缓存都是一些不要求实时性的数据嘛
    一般会有活动一些信息，比如开一个像是国战之类的活动，它可能有很多点位，每个点位会有一些血量

死循环检测是C++层面的死循环检测吗，它是怎么做的
    就是类似于看门狗的一个机制吧，每个逻辑线程会有一个上次更新的一个时间戳，逻辑线程处理完消息就会更新一下这个时间戳
    另外有一个监控的线程，看如果这个时间戳很久没被更新了，就判断它是死循环了
你这套检测逻辑会很耗时吗，压测过吗
    没有吧，它相当于就是写一个数字啊，我是用了一个原子操作吧，因为它要多线程去访问
如果检测到死循环会怎么处理
    我们会输出一条错误日志，然后错误日志会触发运维那边的告警，然后会人工介入去查看
    就是查它日志或者查它调用栈，大概是调用到什么地方，然后看代码哪里会卡住然后去修复代码，修复完了更新
你们遇到死循环之后CPU不会飚满吗
    看情况吧，就是现在服务器都是多核的嘛，一个核满了占用不多
那占用100%多监测也能发现
    监测是一种方法，但是光监测CPU的话可能不会发现IO阻塞这种问题

你提到了如果有异步事务就禁止玩家下线，这么简单处理会有问题吗，比如异步事务一直处理不完呢
    像这种异步的协程我们是只在处理玩家请求的时候才会发起，如果没有玩家请求的话是不会主动发起一个协程的
那没有timer这种服务器驱动的消息吗
    有timer，但是不是用协程的
那玩家发起下线之后就是一直等在这里，它不会发起其他请求吗
    玩家下线之后连接就断了，就不会有新的消息了
    就是连接断了以后我们会有一个定时器，就是判断它多久没有，像是心跳协议这种请求的话，就直接给玩家下线了
那如果这时候玩家再上线呢
    那就是直接取消掉这个定时器
    我们做这个延迟登出就是不想玩家频繁上下线的时候，还要去数据库请求一遍

你工具这块大概是做了哪些工具啊
    像Jenkins维护啊，比如我们的服务器构建啊，我们的数值构建啊，还有一个数值校验的工具
    我内部也是自己用Python做了一个B/S架构的服务器工具箱嘛，里面很多功能都有，就是辅助游戏开发的功能
    比如玩家账号拷贝、服务器时间修改、发送GM命令、模拟抽卡什么的
拷贝账号是用在真实的环境里面吗
    我们不允许写入真实环境，但是会从线上环境拷贝玩家账号到一个测试环境
能把工具箱架构讲一下吗
    很简单的，就是无状态的web服务器那一套
    然后还有一个worker进程，专门用来处理一些异步任务的
模拟抽卡是一个小游戏是吗
    呃不是小游戏，我们会用一些机器人账号向我们的服务器发送抽卡的请求吧
    会统计它抽到的结果，统计出来就是验证一下它的概率是不是对的

你现在还在职吗
游戏服务器这块你主要想从事哪些东西
好像没有提到做什么活动啊，有什么大活动你讲一下吧
Go语言这些都是你自己学的，那工作中你们游戏里面主要还是C++是吧
现在是住在哪个地方

反问
    技术栈是怎么样的，用了什么语言、框架或者技术之类的
        可能跟你们的差别不会非常大，我们是C++加Lua，然后Lua会更多一点
        架构的话可能会差别大一些，你们是通过nodeserver来做中转嘛，我们是和Erlang那种实现方式一样，基于Actor模式的很典型的设计方式，在各个服务之间通信这一层比较像
        另外我们服务器是有战斗的，gameserver是真正的战斗服，你们的gameserver是相当于一个大厅服是吗，相当于那种回合制游戏里面的大厅服
        类似莉莉丝那种，Dota传奇那种，SLG那种回合制的，登录上去就是进入了一个大厅
    那你们服务器会跑物理引擎吗
        有类似的实现，有碰撞检测，有寻路，有伤害结算
    那是什么类型的
        就是相当于有大厅的MMO吧，但不是传统的那种，就是紧跟时代的MMO
    工作氛围怎么样

平时玩的MMO游戏多吗
像（上家另一个项目）他们这么火，他们的架构和一些实现你有去关注过吗
后面如果有团队还是让你侧重做工具相关的，你会愿意吗，比如先做工具相关的，工具链完善了再做游戏内的
    （不会又要打发我吧）能两个一起做吗
那工具这块你有什么见解吗，整个游戏里用到的工具链，怎么把它完整地整合一下，让其他项目能快速地用起来
像你做工具的话如果做好了（上家另一个项目）那边也可以用


------
还是没有算法题，可能游戏服务器社招（一面）真的不怎么考算法
主要还是简历上面写的各种东西是怎么实现的。没有记住压测数据太吃亏了
过3天凉了，可能游戏服务器经历不够多，他们真的想打发我去做工具
